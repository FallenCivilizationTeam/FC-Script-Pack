class 'Exchange'
ticks = 0
currentplayer = 0
cancelcount = 0
nametag = ""
pic = Image.Create(AssetLocation.Base64, nametag)
sz_indicator = Image.Create(AssetLocation.Resource, "SZ_Indicator_IMG")
function Exchange:__init()
	LocalPlayer:SetValue("TradeMode", false)
	screen_size = Render.Size
	itrade = {} -- temp hold for items being traded | form: itrade[index] = lootstring
	other_items = {} -- hold for other ply's items | form: other_items[index] = lootstring
	--
	InZone = true
	render_requester = false
	accept_decline = false
	freeze_trade = false
	other_ply_confirm = false
	other_ply_accept = false
	last_request = 0
	--
	-- START GUI BUILD
	BackGround_Image = Image.Create(AssetLocation.Resource, "Inv_BG_IMG")
	Storage_Image = Image.Create(AssetLocation.Resource, "StorageIcon_IMG")
	Social_Image = Image.Create(AssetLocation.Resource, "Social_Cat_IMG")
	Food_Image = Image.Create(AssetLocation.Resource, "Food_Cat_IMG")
	Weaponry_Image = Image.Create(AssetLocation.Resource, "Weaponry_Cat_IMG")
	Build_Image = Image.Create(AssetLocation.Resource, "Build_Cat_IMG")
	Raw_Image = Image.Create(AssetLocation.Resource, "Raw_Cat_IMG")
	Utility_Image = Image.Create(AssetLocation.Resource, "Utility_Cat_IMG")
	Default_Item = Image.Create(AssetLocation.Resource, "Default_Item_IMG")
	Dropbox_IMG = Image.Create(AssetLocation.Resource, "DropBox_IMG")
	T1_IMG = Image.Create(AssetLocation.Resource, "T1_INDICATOR_IMG")
	T2_IMG = Image.Create(AssetLocation.Resource, "T2_INDICATOR_IMG")
	T3_IMG = Image.Create(AssetLocation.Resource, "T3_INDICATOR_IMG")
	T4_IMG = Image.Create(AssetLocation.Resource, "T3_INDICATOR_IMG") --lootbox
	T5_IMG = Image.Create(AssetLocation.Resource, "T3_INDICATOR_IMG") --storage
	Parachute = Image.Create(AssetLocation.Resource, "Parachute_IMG")
	Grapple = Image.Create(AssetLocation.Resource, "Grapplehook_IMG")
	storage_garbage = Image.Create(AssetLocation.Resource, "GarbageBin_IMG")
	mt1 = Image.Create(AssetLocation.Resource, "ScrapMetal_IMG")
	mt2 = Image.Create(AssetLocation.Resource, "Iron_IMG")
	mt3 = Image.Create(AssetLocation.Resource, "Steel_IMG")
	mt4 = Image.Create(AssetLocation.Resource, "Silver_IMG")
	mt5 = Image.Create(AssetLocation.Resource, "Platinum_IMG")
	FS = Image.Create(AssetLocation.Resource, "FactionStorage_IMG")
	hellfireturret = Image.Create(AssetLocation.Resource, "(F)HellfireMissileTurret_IMG")
	flameturret = Image.Create(AssetLocation.Resource, "(F)FlamethrowingTurret_IMG")
	defenseraider = Image.Create(AssetLocation.Resource, "DefenseRaider_IMG")
	craftingtable = Image.Create(AssetLocation.Resource, "CraftingTable_IMG")
	missileturret = Image.Create(AssetLocation.Resource, "(F)MissileTurret_IMG")
	AllFood = Image.Create(AssetLocation.Resource, "AllFood_IMG")
	AllWeaponry = Image.Create(AssetLocation.Resource, "AllWeaponry_IMG")
	AllWood = Image.Create(AssetLocation.Resource, "AllWood_IMG")
	AllVehicles = Image.Create(AssetLocation.Resource, "AllVehicles_IMG")
	Ammo = Image.Create(AssetLocation.Resource, "Ammo_IMG")
	AllRaw = Image.Create(AssetLocation.Resource, "AllRaw_IMG")
	AllBuild = Image.Create(AssetLocation.Resource, "AllBuild_IMG")
	--
	image_panels = {}
	empty_base64 = ""
	empty = Image.Create(AssetLocation.Base64, empty_base64)
	--
	TradeMenu = Window.Create()
	TradeMenu:SetSize(Vector2(screen_size.x * .4, screen_size.y * .45))
	TradeMenu:SetPosition(Vector2(screen_size.x * .15, screen_size.y * .125))
	TradeMenu:SetTitle("Trade Menu")
	TradeMenu:SetVisible(false)
	TradeMenu:Subscribe("WindowClosed", CloseWindow)
	TradeMenu:Subscribe("Render", TradeMenuRender)
	TradeSize = TradeMenu:GetSize()
	--
	img1 = ImagePanel.Create(TradeMenu, "1")
	img2 = ImagePanel.Create(TradeMenu, "2")
	img3 = ImagePanel.Create(TradeMenu, "3")
	img4 = ImagePanel.Create(TradeMenu, "4")
	img5 = ImagePanel.Create(TradeMenu, "5")
	img6 = ImagePanel.Create(TradeMenu, "6")
	img7 = ImagePanel.Create(TradeMenu, "7")
	img8 = ImagePanel.Create(TradeMenu, "8")
	img9 = ImagePanel.Create(TradeMenu, "9")
	img10 = ImagePanel.Create(TradeMenu, "10")
	img11 = ImagePanel.Create(TradeMenu, "11")
	img12 = ImagePanel.Create(TradeMenu, "12")
	img13 = ImagePanel.Create(TradeMenu, "13")
	img14 = ImagePanel.Create(TradeMenu, "14")
	img15 = ImagePanel.Create(TradeMenu, "15")
	img16 = ImagePanel.Create(TradeMenu, "16")
	--
	img1:SetPositionRel(Vector2(.01, .735))
	img2:SetPositionRel(Vector2(.275, .735))
	img3:SetPositionRel(Vector2(.54, .735))
	img4:SetPositionRel(Vector2(.8, .735))
	img5:SetPositionRel(Vector2(.01, .53))
	img6:SetPositionRel(Vector2(.275, .53))
	img7:SetPositionRel(Vector2(.54, .53))
	img8:SetPositionRel(Vector2(.8, .53))
	--------------------------------------
	img9:SetPositionRel(Vector2(.01, .01))
	img10:SetPositionRel(Vector2(.275, .01))
	img11:SetPositionRel(Vector2(.54, .01))
	img12:SetPositionRel(Vector2(.8, .01))
	img13:SetPositionRel(Vector2(.01, .215))
	img14:SetPositionRel(Vector2(.275, .215))
	img15:SetPositionRel(Vector2(.54, .215))
	img16:SetPositionRel(Vector2(.8, .215))
	--
	image_panels[1] = img1
	image_panels[2] = img2
	image_panels[3] = img3
	image_panels[4] = img4
	image_panels[5] = img5
	image_panels[6] = img6
	image_panels[7] = img7
	image_panels[8] = img8
	image_panels[9] = img9
	image_panels[10] = img10
	image_panels[11] = img11
	image_panels[12] = img12
	image_panels[13] = img13
	image_panels[14] = img14
	image_panels[15] = img15
	image_panels[16] = img16
	--
	local size_vec = Vector2(TradeMenu:GetSize().x * .18, TradeMenu:GetSize().y * .18) -- config image panel size here
	for name, panel in pairs(image_panels) do
		panel:BringToFront()
		panel:SetSize(size_vec)
		panel:Subscribe("HoverEnter", PanelHoverEnter)
		panel:Subscribe("HoverLeave", PanelHoverLeave)
		panel:SetImage(empty)
	end
	--
	rect1 = Rectangle.Create(TradeMenu, "rect1")
	rect1:SetPositionRel(Vector2(.0, .5275))
	rect1:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .005))
	rect1:SetColor(Color(255, 0, 255))
	--
	rect2 = Rectangle.Create(TradeMenu, "rect2")
	rect2:SetPositionRel(Vector2(.0, .215) + Vector2(0, img1:GetSizeRel().y))
	rect2:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .005))
	rect2:SetColor(Color(0, 255, 0))
	--
	Confirm = Button.Create(TradeMenu, "Confirm")
	Confirm:SetPositionRel(Vector2(.1, .425))
	Confirm:SetSize(Vector2(TradeSize.x * .2, TradeSize.y * .07))
	Confirm:Subscribe("Press", TradeMenuPress)
	Confirm:SetText("Confirm")
	Confirm:SetToggleable(true)
	--
	Accept = Button.Create(TradeMenu, "Accept")
	Accept:SetPositionRel(Vector2(.685, .425))
	Accept:SetSize(Vector2(TradeSize.x * .2, TradeSize.y * .07))
	Accept:Subscribe("Press", TradeMenuPress)
	Accept:SetText("Accept")
	Accept:SetToggleable(true)
	--
	Cancel = Button.Create(TradeMenu, "Cancel")
	Cancel:SetPositionRel(Vector2(.42, .4175))
	Cancel:SetSize(Vector2(TradeSize.x * .15, TradeSize.y * .095))
	Cancel:Subscribe("Press", TradeMenuPress)
	Cancel:SetText("Cancel")
	-- END GUI BUILD
end
-------------- START GUI FUNCTIONS -------------------
function TradeMenuPress(btn)
	if btn == Confirm then
		freeze_trade = true
		rect1:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .4))
		rect1:SetColor(Color(255, 0, 255, 75))
		--
		Events:Fire("UpdateSharedObjectInventory")
		local inventory_table = SharedObject.GetByName("ClientSharedInventory"):GetValue("INV")
		for index, lootstring in pairs(itrade) do
			local item_name = GetLootName(lootstring)
			local trade_amount = GetLootAmount(lootstring)
			local category = reference[item_name]
			
		end
		local safe = true
		Events:Fire("UpdateSharedObjectInventory")
		local inventory_table = SharedObject.GetByName("ClientSharedInventory"):GetValue("INV")
		for index, lootstring in pairs(itrade) do
			local item = GetLootName(lootstring)
			local itemcount = 0 -- count of itrade
			local itemcount2 = 0 -- count of inventory
			local category = reference[item]
			for index2, lootstring2 in pairs(itrade) do
				if GetLootName(lootstring2) == item then
					itemcount = itemcount + GetLootAmount(lootstring2)
				end
			end
			for index3, lootstring3 in pairs(inventory_table[category]) do
				if GetLootName(lootstring3) == item then
					itemcount2 = itemcount2 + GetLootAmount(lootstring3)
				end
			end
			if itemcount > itemcount2 then -- sending more than inventory has (hacks)
				Chat:Print("Trade hacking detected", Color(255, 0, 0))
				safe = false
			end
		end	
		--
		if safe == true then
			Network:Send("TradeConfirm", {ply_id = trading_partner:GetId(), items = itrade})
		end
		Confirm:SetToggleState(true)
	elseif btn == Accept then
		if Confirm:GetToggleState() == false or freeze_trade == false then return end
		if Confirm:GetToggleState() == true and freeze_trade == true then
			Accept:SetToggleState(true)
			if other_ply_accept == true then
				Network:Send("ExecuteTrade", {ply_id = trading_partner:GetId()})
				local sub_args = {}
				for index, lootstring in pairs(itrade) do
					local item_name = GetLootName(lootstring)
					local amount = GetLootAmount(lootstring)
					if not sub_args[item_name] then
						sub_args[item_name] = amount
					else
						sub_args[item_name] = sub_args[item_name] + amount
					end
				end
				Events:Fire("DeleteFromInventory", {itable = sub_args})
				--
				local add_args = {}
				for index, lootstring in pairs(other_items) do
					local item_name = GetLootName(lootstring)
					local amount = GetLootAmount(lootstring)
					if not add_args[item_name] then
						add_args[item_name] = amount
					else
						add_args[item_name] = add_args[item_name] + amount
					end
				end
				Events:Fire("AddToInventory", {itable = add_args})
				EndTrade()
			else
				Network:Send("TradeAccept", {ply_id = trading_partner:GetId()})
			end
		end
	elseif btn == Cancel then
		Network:Send("CancelTrade", {ply_id = trading_partner:GetId()})
		trading_partner = nil
		TradeMenu:SetVisible(false)
		Mouse:SetPosition(Vector2(screen_size.x * .5, screen_size.y * .5))
		Mouse:SetVisible(false)
		TradeMenu:SetTitle("Trade Menu")
		LocalPlayer:SetValue("TradeMode", false)
	end
end

function TradeMenuRender()
	--local winpos = TradeMenu:GetPosition()
	--local winsize = TradeMenu:GetSize()
	for index, panel in pairs(image_panels) do
		local color
		if index <= 8 then
			color = Color(255, 0, 255)
		else
			color = Color(0, 255, 0)
		end
		local pos = panel:RelativeToAbsolute(Vector2.Zero)
		Render:DrawLine(pos, pos + Vector2(panel:GetWidth(), 0), color) -- top across
		Render:DrawLine(pos, pos + Vector2(0, panel:GetHeight()), color) -- left down
		Render:DrawLine(pos + Vector2(panel:GetWidth(), panel:GetHeight()), pos + Vector2(panel:GetWidth(), panel:GetHeight()) - Vector2(0, panel:GetHeight()), color) -- right up
		Render:DrawLine(pos + Vector2(0, panel:GetHeight()), pos + Vector2(panel:GetWidth(), panel:GetHeight()), color) -- down across
		if itrade[index] then -- if slot has item
			Render:DrawText(pos, tostring(GetLootAmount(itrade[index])), Color(255, 255, 0), TextSize.Default * 1.25) -- draw item amount
		end
		if other_items[index - 8] then
			Render:DrawText(pos, tostring(GetLootAmount(other_items[index - 8])), Color(255, 255, 0), TextSize.Default * 1.25)
		end
	end
end

function PanelHoverEnter(panel)
	--Chat:Print("entered", Color(0, 255, 0))
end

function PanelHoverLeave(panel)
	hovered_panel = nil
end

function CloseWindow(win)
	if win == TradeMenu then -- cancel trade
		Mouse:SetPosition(Vector2(screen_size.x * .5, screen_size.y * .5))
		Mouse:SetVisible(false)
	end
end
-------------- END GUI FUNCTIONS ---------------------
function Exchange:RenderExchange()
	--if LocalPlayer:GetValue("CanHit") == false then
		--sz_indicator:Draw(Vector2(0,0), Render.Size, Vector2(0,0), Vector2(1,1))
	--end
	if currentplayer ~= 0 and IsValid(currentplayer) then
		local width = Render:GetTextWidth(name, TextSize.Default * 2.5)
		local height = Render:GetTextHeight(name, TextSize.Default * 2.5)
		local startdraw = (screen_size.x * .5) - (width / 2)
		pic:Draw(Vector2(startdraw, screen_size.y * .01), Vector2(width + (screen_size.x * .0325), pic:GetPixelSize().y * .3), Vector2(0, 0), Vector2(1, 1))
	end
	if render_requester == true then
		if IsValid(requesting_player) then
			local name = requesting_player:GetName()
			local width = Render:GetTextWidth(name .. " has requested a trade - press 5 to accept | 6 to decline", TextSize.Default * 2.0) / 2
			Render:DrawText(Vector2((screen_size.x * .5) - width, screen_size.y * .1), name .. " has requested a trade - press 5 to accept | 6 to decline", Color(0, 255, 0), TextSize.Default * 2.0)
		end
	end
end

function Exchange:UltraRenderExchange()
	if currentplayer ~= 0 and IsValid(currentplayer) then
		health = currentplayer:GetHealth()
		local width = Render:GetTextWidth(name, TextSize.Default * 2.5)
		local height = Render:GetTextHeight(name, TextSize.Default * 2.5)
		local deadwidth = Render:GetTextWidth("Dead", TextSize.Default * 1.5)
		local startdraw = (screen_size.x * .5) - (width / 2)
		-- .485
		--
		Render:DrawText(Vector2(startdraw + (screen_size.x * .015), screen_size.y * .0275), name, Color(255, 255, 255), TextSize.Default * 2.5)
		Render:DrawText(Vector2(startdraw + (screen_size.x * .015), screen_size.y * .0275), name, Color(0, 255, 255, 100), TextSize.Default * 2.5)
		if health > 0 then
			Render:FillArea(Vector2(startdraw + (screen_size.x * .015), pic:GetPixelSize().y * .235), Vector2(width * health, height / 2), Color(255, 0, 0, 175)) -- width * 1.31
		else
			Render:DrawText(Vector2(startdraw + (width / 2), (screen_size.y * .0275) + (height * .9)), "Dead", Color(255, 0, 0, 200), TextSize.Default * 1.5)
		end
	end
	
end

function Exchange:Tick()
	ticks = ticks + 1
	if ticks < 15 then return end
	ticks = 0
	--
	if trading_partner then
		if TradeMenu:GetVisible() == false then -- cancel trade
			if LocalPlayer:GetValue("TradeMode") == true then
				Network:Send("CancelTrade", {ply_id = trading_partner:GetId()})
				trading_partner = nil
				TradeMenu:SetTitle("Trade Menu")
			end
		end
	end
	--
	if accept_decline == true then
		if os.clock() - last_request > 15 then -- config time to accept/decline here
			Network:Send("RespondToRequest", {ply_id = requesting_player:GetId(), accept = "afk"})
			accept_decline = false
		end
	end
	--
	ray = Physics:Raycast(Camera:GetPosition(), Camera:GetAngle() * Vector3.Forward, 0, 500)
	if ray.entity then
		if currentplayer == 0 and (ray.entity.__type == "Player" or ray.entity.__type == "Vehicle" or ray.entity.__type == "ClientActor") then
			currentplayer = ray.entity
			name = GetEntityName(currentplayer)
			cancelcount = 0
			LocalPlayer:SetValue("EXC_Target", currentplayer) -- player or vehicle or clientactor
			return
		end	
		if IsValid(currentplayer) and type(currentplayer) ~= "number" then
			if currentplayer:GetId() ~= ray.entity:GetId() or tostring(currentplayer) ~= tostring(ray.entity) then
				if ray.entity.__type == "Player" or ray.entity.__type == "Vehicle" or ray.entity.__type == "ClientActor" then
					currentplayer = ray.entity
					name = GetEntityName(currentplayer)
					cancelcount = 0
					LocalPlayer:SetValue("EXC_Target", currentplayer) -- player or vehicle or clientactor
					return
				end
			end
		else
			--currentplayer = ray.entity
			--name = GetEntityName(currentplayer)
			--cancelcount = 0
			--LocalPlayer:SetValue("EXC_Target", currentplayer) -- player or vehicle or clientactor
			--return
		end
	else
		cancelcount = cancelcount + 1
		if cancelcount == 20 then
			currentplayer = 0
			name = ""
			cancelcount = 0
			LocalPlayer:SetValue("EXC_Target", nil)
		end
	end
end

function Exchange:UpdatePlayer(args) -- received from hitdetection module (CURRENTLY DEPRECATED - CURRENTLY DEPRECATED - CURRENTLY DEPRECATED - CURRENTLY DEPRECATED)
	if currentplayer ~= 0 then
		if currentplayer == "Player" then
			if args.target.__type == "Player" then
				if currentplayer ~= args.target then
					currentplayer = args.target
					LocalPlayer:SetValue("EXC_Target", currentplayer)
					name = currentplayer:GetName() or GetActorName(currentplayer)
					cancelcount = 0
				end
			elseif args.target.__type == "Vehicle" then
				currentplayer = args.target
				LocalPlayer:SetValue("EXC_Target", currentplayer)
				name = currentplayer:GetName() or GetActorName(currentplayer)
				cancelcount = 0
			end
		elseif currentplayer == "Vehicle" then
			if args.target.__type == "Vehicle" then
				if currentplayer ~= args.target then
					currentplayer = args.target
					LocalPlayer:SetValue("EXC_Target", currentplayer)
					name = currentplayer:GetName() or GetActorName(currentplayer)
					cancelcount = 0
				end
			elseif args.target.__type == "Player" then
				currentplayer = args.target
				LocalPlayer:SetValue("EXC_Target", currentplayer)
				name = currentplayer:GetName() or GetActorName(currentplayer)
				cancelcount = 0
			end
		end
	else
		currentplayer = args.target
		LocalPlayer:SetValue("EXC_Target", currentplayer)
		name = currentplayer:GetName() or GetActorName(currentplayer)
		cancelcount = 0
	end
end

function Exchange:KeyDownExchange(args)
	if args.key == string.byte("0") then
		if currentplayer ~= 0 and IsValid(currentplayer) and currentplayer.__type == "Player" then
			if TradeZone:IsInZone() == true then
				if LocalPlayer:GetValue("WillTrade") == false then
					Chat:Print("Type /trade to enable trading", Color(255, 255, 0))
					return
				end
				if currentplayer:GetValue("WillTrade") == true then
					Chat:Print("Initiating Trade", Color(0, 255, 0))
					Network:Send("RequestTrade", {ply_id = currentplayer:GetId()})
				else
					Chat:Print(tostring(currentplayer:GetName()) .. " has disabled trading requests", Color(255, 255, 0))
				end
			else
				Chat:Print(tostring(currentplayer:GetName()) .. " has disabled trading requests", Color(255, 255, 0))
			end
		end
	elseif accept_decline == true then
		if args.key == string.byte("5") then
			Network:Send("RespondToRequest", {ply_id = requesting_player:GetId(), accept = true})
			render_requester = false
			accept_decline = false
			-- START TRADING
			for k, v in pairs(itrade) do itrade[k] = nil end
			trading_partner = Copy(requesting_player)
			if not trading_partner then
				Chat:Print("trading_partner nill error on starting trade", Color(255, 0, 0))
			end
			requesting_player = nil
			for k, v in pairs(itrade) do itrade[k] = nil end
			PrepareTrade()
		elseif args.key == string.byte("6") then
			Network:Send("RespondToRequest", {ply_id = requesting_player:GetId(), accept = false})
			render_requester = false
			requesting_player = nil
			accept_decline = false
		end
	end
end

function Exchange:LocalPlyInput(args) -- add this: subscribe and unsubscribe
	if TradeMenu:GetVisible() == true then
		if args.input == Action.FireLeft or args.input == Action.FireRight or args.input == Action.McFire or args.input == Action.LookDown or args.input == Action.LookLeft or args.input == Action.LookRight or args.input == Action.LookUp or args.input == Action.Accelerate or args.input == Action.TurnLeft or args.input == Action.TurnRight or args.input == Action.MoveLeft or args.input == Action.MoveRight or args.input == Action.MoveForward or args.input == Action.MoveBackward or args.input == Action.Jump then
			return false
		end
	end
end

function Exchange:LocalPlyChat(args)
	if args.text == "/trade" then
		Network:Send("ChangeWillTrade")
		return false
	end
end

function Exchange:ConfirmRequestTrade(args) -- receives requester(ply id)
	requesting_player = Player.GetById(args.requester)
	if requesting_player then
		render_requester = true
		accept_decline = true
	end
	last_request = os.clock()
end

function Exchange:StartTrade(args) -- receives ply_id
	trading_partner = Player.GetById(args.ply_id)
	--Chat:Print(tostring(trading_partner), Color(0, 255, 0))
	if trading_partner then
		PrepareTrade()
	end
end

function Exchange:ServerCancelledTrade()
	trading_partner = nil
	TradeMenu:SetVisible(false)
	Mouse:SetPosition(Vector2(screen_size.x * .5, screen_size.y * .5))
	Mouse:SetVisible(false)
	Chat:Print("Trade was cancelled by other trader", Color(255, 255, 0))
	LocalPlayer:SetValue("TradeMode", false)
end

function Exchange:DeniedTrade()
	Chat:Print("Other player denied trade", Color(255, 255, 0))
end

function Exchange:OtherPlyConfirm(args) -- receives items
	for k, v in pairs(other_items) do other_items[k] = nil end
	other_items = Copy(args.items)
	for index, lootstring in pairs(other_items) do
		local panel = image_panels[index + 8]
		local item_name = GetLootName(lootstring)
		panel:SetImage(pics[item_name]) 
	end
	rect2:SetColor(Color(0, 255, 0, 75))
	rect2:SetPositionRel(Vector2(.0, .0))
	rect2:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .4))
	UpdatePanels()
	other_ply_confirm = true
end

function Exchange:OtherPlyAccept()
	other_ply_accept = true
end

function Exchange:OtherPlyAcceptExecuteTrade()
	local sub_args = {}
	for index, lootstring in pairs(itrade) do
		local item_name = GetLootName(lootstring)
		local amount = GetLootAmount(lootstring)
		if not sub_args[item_name] then
			sub_args[item_name] = amount
		else
			sub_args[item_name] = sub_args[item_name] + amount
		end
	end
	Events:Fire("DeleteFromInventory", {itable = sub_args})
	--
	local add_args = {}
	for index, lootstring in pairs(other_items) do
		local item_name = GetLootName(lootstring)
		local amount = GetLootAmount(lootstring)
		if not add_args[item_name] then
			add_args[item_name] = amount
		else
			add_args[item_name] = add_args[item_name] + amount
		end
	end
	Events:Fire("AddToInventory", {itable = add_args})
	EndTrade()
end

function Exchange:AddToTrade(args) -- receives add_item
	--Chat:Print("1", Color(255, 0, 0))
	if freeze_trade == true then return end
	--Chat:Print("5", Color(255, 0, 0))
	local item_count = 0
	for index, lootstring in pairs(itrade) do
		if GetLootName(lootstring) == args.add_item then
			item_count = item_count + GetLootAmount(lootstring)
		end
	end
	--Chat:Print("2", Color(255, 0, 0))
	if CanAddItemFromInv(args.add_item, item_count) == false then return end
	local slots_used = table.count(itrade)
	local iadd = 1
	for index, lootstring in pairs(itrade) do
		local item = GetLootName(lootstring)
		if item == args.add_item then
			local original_amount = GetLootAmount(lootstring)
			while iadd ~= 0 do
				if original_amount >= stacklimit[item] then
					break
				else
					original_amount = original_amount + 1
					iadd = iadd - 1
					itrade[index] = item .. " (" .. tostring(original_amount) .. ")" -- add one by one
				end
			end
		end
		if iadd == 0 then break end
	end
	--Chat:Print("3", Color(255, 0, 0))
	if iadd > 0 then -- if has iterated and no existing package can be added to and still amount left to add
		local openslot = GetOpenIndex(itrade)
		while openslot ~= 34 and iadd > 0 do
			original_amount = 0
			while iadd ~= 0 do
				if original_amount >= stacklimit[args.add_item] then
					break
				else
					original_amount = original_amount + 1
					iadd = iadd - 1
					itrade[openslot] = args.add_item .. " (" .. tostring(original_amount) .. ")" -- add one by one
				end
			end
			--ShiftCategoryIndexes(category)
			openslot = GetOpenIndex(itrade)
		end
	end
	if iadd > 0 then Chat:Print("No space remaining for this item", Color(255, 255, 0)) end
	ShiftTradeTableIndexes()
	UpdatePanels() -- update trade image panels
end

function Exchange:SubtractFromTrade(args) -- receives sub_item
	if freeze_trade == true then return end
	local category = reference[args.sub_item]
	local isub = 1
	for index, lootstring in pairs(itrade) do
		local item = GetLootName(lootstring)
		if item == args.sub_item then
			local original_amount = GetLootAmount(lootstring)
			while isub ~= 0 do
				if original_amount - 1 == 0 then
					itrade[index] = nil
					isub = isub - 1
					break
				else
					itrade[index] = item .. " (" .. tostring(original_amount - 1) .. ")" -- subtract one by one
					isub = isub - 1
					original_amount = original_amount - 1
				end
			end
		end
		if isub == 0 then break end
	end
	ShiftTradeTableIndexes()
	UpdatePanels()
	if isub > 0 then Chat:Print("Error in Delete From Trade Table: Tried to subtract too much?", Color(255, 255, 0)) end
end

function CanAddItemFromInv(a_item, current_amount)
	Events:Fire("UpdateSharedObjectInventory")
	local inventory_table = SharedObject.GetByName("ClientSharedInventory"):GetValue("INV")
	local category = reference[a_item]
	local item_count = 0
	for index, lootstring in pairs(inventory_table[category]) do
		if GetLootName(lootstring) == a_item then
			item_count = item_count + GetLootAmount(lootstring)
		end
	end
	if current_amount < item_count then
		return true
	else
		return false
	end
end

function UpdatePanels()
	for index, panel in pairs(image_panels) do panel:SetImage(empty) end
	for index, lootstring in pairs(itrade) do -- local player items
		local item = GetLootName(lootstring)
		local item_amount = GetLootAmount(lootstring)
		image_panels[index]:SetImage(pics[item])
	end
	for index, lootstring in pairs(other_items) do
		local item = GetLootName(lootstring)
		local item_amount = GetLootAmount(lootstring)
		image_panels[index + 8]:SetImage(pics[item])
	end
end

-- START CONVENIENCE FUNCTIONS
function GetLootAmount(lootstring)
	return tonumber(string.match(lootstring, '%d+'))
end

function GetLootName(lootstring)
	local number = tonumber(string.match(lootstring, '%d+'))
	local item34 = ""
	if number == nil then return nil end
	if number < 10 then
		item34 = string.sub(lootstring, 1, string.len(lootstring) - 4)
	elseif number >= 10 then
		item34 = string.sub(lootstring, 1, string.len(lootstring) - 5)
	elseif number >= 100 then
		item34 = string.sub(lootstring, 1, string.len(lootstring) - 6)
	elseif number >= 1000 then
		item34 = string.sub(lootstring, 1, string.len(lootstring) - 7)
	end
	return item34
end

function GetOpenIndex(itable) -- receives table
	local openindex = 34
	for i = 1, 8 do -- iterate until not nil
		if itable[i] == nil then
			openindex = i
			return openindex
		end
	end
	if openindex == 34 then -- do flag check on receive function argument
		return openindex
	end
end

function ShiftTradeTableIndexes() -- BUG BECAUSE TABLE IS NOT SEQUENTIAL ANYMORE - SPLIT INTO TWO TABLES?
	local counter = 1
	for old_index, lootstring in pairs(itrade) do
		itrade[old_index] = nil
		itrade[counter] = lootstring
		counter = counter + 1
	end
end

function PrepareTrade()
	for k, v in pairs(itrade) do itrade[k] = nil end
	for k, v in pairs(other_items) do other_items[k] = nil end
	freeze_trade = false
	UpdatePanels()
	TradeMenu:SetTitle("Trade Menu - ( now trading with: " .. trading_partner:GetName() .. " )")
	TradeMenu:SetVisible(true)
	Mouse:SetPosition(Vector2(screen_size.x * .5, screen_size.y * .5))
	Mouse:SetVisible(true)
	LocalPlayer:SetValue("TradeMode", true)
	rect1:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .005))
	rect1:SetColor(Color(255, 0, 255))
	rect2:SetSize(Vector2(TradeSize.x * 1.1, TradeSize.y * .005))
	rect2:SetColor(Color(0, 255, 0))
	rect2:SetPositionRel(Vector2(.0, .215) + Vector2(0, img1:GetSizeRel().y))
	Confirm:SetToggleState(false)
	Accept:SetToggleState(false)
	other_ply_confirm = false
	other_ply_accept = false
end

function EndTrade()
	trading_partner = nil
	TradeMenu:SetVisible(false)
	Mouse:SetPosition(Vector2(screen_size.x * .5, screen_size.y * .5))
	Mouse:SetVisible(false)
	LocalPlayer:SetValue("TradeMode", false)
	for index, panel in pairs(image_panels) do panel:SetImage(empty) end
end

function GetEntityName(entity)
	if entity.__type == "ClientActor" then
		Events:Fire("UpdateSharedActors")
		local actor_table = SharedObject.GetByName("ClientSharedActors"):GetValue("Actors")
		local wno_id = table.find(actor_table, currentplayer:GetId())
		if wno_id then
			local WNO = WorldNetworkObject.GetById(wno_id)
			if WNO then
				local actor_name = WNO:GetValue("Name")
				if actor_name then
					return "[NPC] " .. actor_name
				end
			end
		end
		return "Unnamed"
	else
		if entity.__type and IsValid(entity) then
			return entity:GetName()
		else
			return tostring(entity)
		end
	end
end
-- END CONVENIENCE FUNCTIONS

function DebugiTrade(args)
	if args.text == "/itrade" then
		print("table size: " .. tostring(table.count(itrade)))
		for k, v in pairs(itrade) do
			print(tostring(k) .. ": " .. tostring(v))
		end
		return false
	end
end
Events:Subscribe("LocalPlayerChat", DebugiTrade)

exchange = Exchange()

---Events:Subscribe("Render", exchange, exchange.RenderExchange)
Events:Subscribe("PreTick", exchange, exchange.Tick)
--Events:Subscribe("Render", exchange, exchange.UltraRenderExchange)
Events:Subscribe("KeyDown", exchange, exchange.KeyDownExchange)
Events:Subscribe("LocalPlayerChat", exchange, exchange.LocalPlyChat)
Events:Subscribe("LocalPlayerInput", exchange, exchange.LocalPlyInput)
--
Events:Subscribe("AddToTrade", exchange, exchange.AddToTrade)
Events:Subscribe("SubtractFromTrade", exchange, exchange.SubtractFromTrade)
--
Network:Subscribe("ConfirmRequestTrade", exchange, exchange.ConfirmRequestTrade)
Network:Subscribe("StartTrade", exchange, exchange.StartTrade)
Network:Subscribe("ServerCancelledTrade", exchange, exchange.ServerCancelledTrade)
Network:Subscribe("DeniedTrade", exchange, exchange.DeniedTrade)
Network:Subscribe("OtherPlyConfirm", exchange, exchange.OtherPlyConfirm)
Network:Subscribe("OtherPlyAccept", exchange, exchange.OtherPlyAccept)
Network:Subscribe("OtherPlyAcceptExecuteTrade", exchange, exchange.OtherPlyAcceptExecuteTrade)
--Events:Subscribe("UpdateCurrentPlayer", exchange, exchange.UpdatePlayer)